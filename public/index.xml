<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多做多说</title>
    <link>dzds.me/</link>
    <description>Recent content on 多做多说</description>
    <image>
      <title>多做多说</title>
      <url>dzds.me/content/img/icon.png</url>
      <link>dzds.me/content/img/icon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Nov 2023 22:53:33 +0000</lastBuildDate>
    <atom:link href="dzds.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>又十年</title>
      <link>dzds.me/posts/another_10years/</link>
      <pubDate>Wed, 01 Nov 2023 22:53:33 +0000</pubDate>
      <guid>dzds.me/posts/another_10years/</guid>
      <description>二月听到学友新歌
张学友的新单曲又十年，旋律简单，歌词动人。恰好今年也是来美十年，人生前18年在家乡，7年裤子大，简单一算，西雅图已经是故乡外呆的最久的地方。
这几年随着小红书转码热门话题，十年前，我也算是半个转码。 但当时没有leetcode，没有bootcamp，也没有社交热度。只是作为相关专业电子信息工程，在学校就学了很多计算机相关课程，任何课题也都离不开代码。能动手实现并且立马看到成效比偏理论的通信更吸引我，于是毕业前就顺利成章的锁定专门找计算机行业工作。
年纪渐渐增长才发觉自己是被时间追着跑，一眨眼又是一个十年，连想停下来喘口气都是奢侈的。
一生有几个理想能够扛得住岁月 还不如好好地过越来越少的明天
一眨眼 又是一个十年 那些瓜葛纠结 在某一天突然迎刃而解</description>
    </item>
    <item>
      <title>吾心安处</title>
      <link>dzds.me/posts/the-home/</link>
      <pubDate>Wed, 01 Nov 2023 22:53:33 +0000</pubDate>
      <guid>dzds.me/posts/the-home/</guid>
      <description>于2023/06去看即将搬入的新家有感
旭日起山巅，夕阳落湖边。 闹市取幽径，转角见屋檐。</description>
    </item>
    <item>
      <title>夏日绝句</title>
      <link>dzds.me/posts/goodbye-google/</link>
      <pubDate>Tue, 20 Jul 2021 07:17:16 +0000</pubDate>
      <guid>dzds.me/posts/goodbye-google/</guid>
      <description>于2021年7月18日别谷歌奔赴新征程有感而作
序 微软五年，谷歌两载，如白驹过隙，忽然而已。 山河壮阔，星辰辽远，纵跬步咫尺，又是好风景。
银鞍白马微风软，飒沓流星谷中歌。
风鹏正举九万里，食苹鹿鸣下山河。</description>
    </item>
    <item>
      <title>Recap of Scala tutorial</title>
      <link>dzds.me/posts/scala-intro/</link>
      <pubDate>Mon, 12 Jul 2021 11:29:23 +0000</pubDate>
      <guid>dzds.me/posts/scala-intro/</guid>
      <description>A cheatsheet that gets you started. The original tutorial can be found here
Main function The normal version:
object Hello { def main(args: Array[String]) = { println(&amp;#34;Hello, world&amp;#34;) } } The version that extends App trait
object Hello extends App { println(&amp;#34;Hello, world&amp;#34;) } // To access args. object Hello extends App { if (args.size == 0) println(&amp;#34;Hello, you&amp;#34;) else println(&amp;#34;Hello, &amp;#34; + args(0)) } As you may notice: no ; needed as ending in Scala.</description>
    </item>
    <item>
      <title>详解水塘抽样(Reservoir sampling)</title>
      <link>dzds.me/posts/algorithm-reservoir-sampling/</link>
      <pubDate>Wed, 24 Mar 2021 20:04:23 +0000</pubDate>
      <guid>dzds.me/posts/algorithm-reservoir-sampling/</guid>
      <description>一个场景 当内存无法加载全部数据时，如何从包含未知大小的数据流中随机选取k个数据，并且要保证每个数据被抽取到的概率相等。
水塘抽样 把上述问题具体化为给定一个未知大小数组data[]，从中选取k个数，要求每个数被选中的概率相等。假设数组长度为n，则每个数被选中概率应为k/n。
策略是：
对最前面k个数，直接放到数组chosen[]即chosen[i] = data[i] 0 &amp;lt;= i &amp;lt; k。 对data[i], i &amp;gt;= k，先生成个[0...i)间的随机数(左闭右开)，假设rand(0, i) = j，则如果j &amp;lt; k,则做替换chosen[j] = data[i]。否则，nothing happens. 如此反复直到结束。 Java实现如下：
public class ReservoirSampling { private Random rand = new Random(); public int[] sampling(int[] data, int k) { int[] chosen = new int[k]; int i = 0; for (int d : data) { if (i &amp;lt; k) { chosen[i] = d; } else { int j = rand.</description>
    </item>
    <item>
      <title>Java集合速览</title>
      <link>dzds.me/posts/java-collections/</link>
      <pubDate>Sun, 07 Mar 2021 09:52:12 +0000</pubDate>
      <guid>dzds.me/posts/java-collections/</guid>
      <description>A quick review of Java Collection and Map key methods. Array based collections usually have:
Method Time complexity add O(1) insert(int index) O(N) remove O(1) remove(int index) O(N) find(Object value) O(N) PriorityQueue, TreeSet and TreeMap are implemented based on balanced tree, thus:
Method Time complexity offer O(logN) poll O(logN) peek O(1) Overview via a diagram Collections extends Iterable which has below key methods:
Method Description boolean hasNext() This method returns true if the iterator has more elements.</description>
    </item>
    <item>
      <title>详解线段树之进阶(Segment Tree)</title>
      <link>dzds.me/posts/algorithm-segment-tree-2/</link>
      <pubDate>Fri, 05 Mar 2021 10:43:21 +0000</pubDate>
      <guid>dzds.me/posts/algorithm-segment-tree-2/</guid>
      <description>懒更新(lazy update) 上文留下一个问题没有解决，就是对一个区间更新。对一个元素的更新复杂度为O(N),N为数组长度,按上文方法对区间更新，则复杂度为L*O(N), L为区间长度。
另外，更新原数组元素，是从线段树中对应的叶子节点，一路向上更新到根节点。如果所要更新的区间有很多公共祖先节点，那么这些节点每次都需要被更新一次。如图中如果我们要更新数组中的2, 8, 6分别+5, +1, +9，可以看到图中公共节点如19会更新2次，37则有3次。
另外，在实际应用中，可能只是某些热点数据会频繁被读取，而大部分数据是在冷宫常年不见天日。有些更新没有必要立即落实到每一个节点，而可以在其被读取时再落实更新。
这就是懒更新的登场时刻。
基于数组的实现 既然需要将更新延后落实，那么就需要保存这些更新，所以需要一个与tree长度一致的lazy数组来保存对应节点没有落实的更新。代码如下。几个注意点：
进入queryCore时，首先需要检查有无当前节点index的更新，如果有，先执行更新，清空该更新，然后继续，其余与正常线段树query区别。 进入updateCore时，也是首先要检查有无当前节点index的更新，如果有，重复上面。 另外，当更新范围[left, right]完全覆盖当前节点代表区间[segLeft, segRight]时，要再次执行更新，但这次update参数是newVal。这是关键点所在，执行完更新，就不用继续递归调用了，因为孩子节点的更新被保存在了lazy[leftChild]和lazy[rightChild]。下次再调用query或者update时，如果执行到节点leftChild或rightChild，则会执行之前保存的更新。 class SegmentTree { private int[] tree; private int[] lazy; private int n; public SegmentTree(int n) { this.n = n; int len = (1 &amp;lt;&amp;lt; (1 + (int)(Math.ceil(Math.log(n) / Math.log(2))))) - 1; tree = new int[len]; lazy = new int[len]; } public int query(int left, int right) { return queryCore(left, right, 0, n - 1, 0); } public void update(int left, int right, int newVal) { updateCore(left, right, 0, n - 1, 0, newVal); } private int queryCore(int left, int right, int segLeft, int segRight, int index) { if (lazy[index] !</description>
    </item>
    <item>
      <title>详解线段树之入门(Segment Tree)</title>
      <link>dzds.me/posts/algorithm-segment-tree/</link>
      <pubDate>Thu, 04 Mar 2021 11:40:40 +0000</pubDate>
      <guid>dzds.me/posts/algorithm-segment-tree/</guid>
      <description>何为线段树 线段树是基于要研究的数组而构建的数据结构，呈二叉树状。线段树的叶子结点就是所要研究的数组，非叶子节点表示数组的一段区间的某个性质的值。比如此区间的和，或者最大值最小值等等。
为什么需要线段树呢？试想你需要设计一个功能，给定一个数组，需要你提供两个操作，一是更改某个元素，而是索引某个区间的和，或者最大值，或者最小值，这里以和举例。最直接也是最简单做法当然是直接在数组上操作，O(1)更新，O(N)索引和，N为区间长度。
class NumArray { public NumArray(int[] nums) { //TODO } // Updates nums[index] = val. public void update(int index, int val) { //TODO} // Gets sum of nums[left ... right]. public int query(int left, int right) { //TODO } } 再进一步，如果需要更新一个区间的元素呢，比如，nums[i] += val, for left &amp;lt;= i &amp;lt;= right。
class NumArray { // ... // Add val, for nums[i] with left &amp;lt;= i &amp;lt;= right public int add(int left, int right, int val) { //TODO } } 继续以上方法，就是遍历区间，一一更新，与索引相同复杂度:O(N)。</description>
    </item>
    <item>
      <title>详解二叉索引树(Binary Index Tree又名Fenwick Tree)</title>
      <link>dzds.me/posts/algorithm-fenwick-tree/</link>
      <pubDate>Wed, 03 Mar 2021 11:38:19 +0000</pubDate>
      <guid>dzds.me/posts/algorithm-fenwick-tree/</guid>
      <description>何为BIT BIT是一种数据结构，名为树其实用数组即可表达。其主要作用是给定了一个数组(或多维数组)，BIT可用来：
O(logN)的复杂度计算给定范围的和,也就是求sum(low, high) O(logN)的复杂度更新数组的一个元素 其构造方法巧妙但简单，可谓大道至简。
给定一个数组a[0 ... N-1],长度N。 BIT表示为indexes[0 ... N],长度N+1。indexes[i]=sum(g(i) ... i], g(i)=i-i&amp;amp;(-i)，注意是左开右闭区间。i&amp;amp;(-i)得到的是一个数字的二进制表示中只留下最右的1后的数字，比如12=[1100],则12&amp;amp;(-12)只留下最右的1就成了4=[0100]。 注意到indexes[]从1开始计数，所以始终有indexes[0]=0。为了说明方便，在数组a[]前面添加了个元素0。
看图说话，如此构造后，原数组的和sum[0 ... i]就可以通过把能覆盖range[0 ... i]的indexes[]加起来得到。比如求sum[0 ... 14]，步骤如下，辅以图示。
先加上indexes[14]，覆盖了a[14], a[13]。 14=[1110],最右1留下后是2=[10],减去后得到12,加上indexes[12]。 12=[1100],最右1留下后是4=[100],减去后得到8,加上indexes[8]。 8=[1000],最右1留下后是8=[1000],减去后得到0，结束。 所以何为BIT,其本质是通过原数组构造一个新数组indexes[]，其中每个元素表示原数组中一段连续子数组的和。范围求和就从线性遍历原数组(O(N))，变成了在indexes[]中快速查找(O(logN))能覆盖所求范围的那几个元素。
而更新则是与求和相反的一个过程,原数组一个元素a[i]更新后，首先需要更新indexes[i]，然后要不停向上，更新每个覆盖了a[i]的indexes元素。比如,a[9]=2 -&amp;gt; a[9]=10,则有：
计算一个更新delta, delta=10-2，更新indexes[9]+=delta, 9=[1001],最右1留下后是1=[0001],加上后得到10,更新indexes[10] += delta。 10=[1010],最右1留下后是2=[0010],加上后得到12,更新indexes[12] += delta。 12=[1100],最右1留下后是4=[0100],加上后得到16,更新indexes[16] += delta。 代码如下:
class BIT { private int[] indexes; private int[] nums; public BIT(int[] nums) { this.nums = nums; indexes = new int[nums.length + 1]; for (int i = 0; i &amp;lt; nums.</description>
    </item>
    <item>
      <title>详解归并排序之应用(Merge sort)</title>
      <link>dzds.me/posts/algorithm-merge-sort/</link>
      <pubDate>Tue, 02 Mar 2021 16:17:18 +0000</pubDate>
      <guid>dzds.me/posts/algorithm-merge-sort/</guid>
      <description>归并排序基于分治思想，基本步骤是把数组一分为二，分别排序，然后将两个排序好的数组合并，合并两个排序好的数组可以在O(N)的复杂度完成。根据T(N) = 2T(2/N) + N,可以推导出时间复杂度为O(NlogN)。代码如下：
public void sort(int[] nums) { mergeSort(nums, 0, nums.length - 1); } private void mergeSort(int[] nums, int start, int end) { if (start &amp;gt;= end) { return; } int mid = start + (end - start) / 2; // Step 1: sort nums[start ... mid]. mergeSort(nums, start, mid); // Step 2: sort nums[mid+1 ... end]. mergeSort(nums, mid + 1, end); // Step 3: merge two sorted sub-arrays.</description>
    </item>
    <item>
      <title>详解并查集(Union Find)</title>
      <link>dzds.me/posts/algorithm_union-find/</link>
      <pubDate>Mon, 01 Mar 2021 13:12:12 +0000</pubDate>
      <guid>dzds.me/posts/algorithm_union-find/</guid>
      <description>What&amp;rsquo;s Union Find? Union Find is useful in finding connected components. The idea behind UF is quite simple.
You have N items initially. Each item forms its own group by setting parent to pointing to itself, i.e., parents[i] = i. Then you can union two items if they are connected or share some common properties in your problem definition. E.g., union(1,3) will connect item 1 and 3 and make their parents both pointing to the same item.</description>
    </item>
    <item>
      <title>除夕</title>
      <link>dzds.me/posts/chuxi-to-2021/</link>
      <pubDate>Thu, 11 Feb 2021 09:56:21 +0000</pubDate>
      <guid>dzds.me/posts/chuxi-to-2021/</guid>
      <description>此一年波谲云诡，世事多艰，终于今宵。纵困苦艰难，江河依旧辽阔。新年至，昂首向前，爆竹声中，品人间烟火。
庚子弥年多诡谲，今岁今日终今宵。
寒随一夜冬雪去，暖入春风催竹梢。
稚齿犹恋除夕夜，三更欲等雄鸡叫。
家别万里相思浓，一柱清香扫尘嚣。</description>
    </item>
    <item>
      <title>Clubhouse需要你解决的问题之三</title>
      <link>dzds.me/posts/clubhouse-problem3/</link>
      <pubDate>Sat, 06 Feb 2021 10:04:40 +0000</pubDate>
      <guid>dzds.me/posts/clubhouse-problem3/</guid>
      <description>书接前文，pm升到partner level后，打算再接再厉，把clubhouse推向全宇宙。
之前一个房间参考微信设置只能容纳500人，pm说500人太少了，应该能容纳5亿人。
dev一时间不知如何回应，只能拉出了张小龙：做产品不是要节制么。
pm：做产品没有一成不变的方法论，每个产品我们都要追问自己几个问题：你这个产品的底层逻辑是什么？顶层设计在哪？最终交付价值是什么？过程的抓手在哪？如何保证闭环？你比别人的亮点在哪优势在哪？你的思考和沉淀又是什么？你的独特价值在哪？(*)
dev：独特价值在哪？
pm：我们能容纳5亿人在一个房间，地球村我都嫌路远，我称之为地球房。
dev：可是我的技术能力可能实现不了这么高难度的服务，认真再想了下，以我的技术能力还是去掉可能二字。
pm：好，那就5000人吧，我已经让步了5个数量级了，可不能再讨价划价了哦。另外，考虑到你的技术能力，给你10%的冗余范围，就是你分布式环境下计数不用做到丝毫无误，高并发下从4500一下跳到5500再阻止人加入也可以，4500时就阻止人加入也可以。
dev：你是不是一开始就只想要5000人的房间。
pm：你知道你为什么还是Senior SDE么？
dev：请指教
pm：这个功能deliver时，我跟你1：1
请问，如何完成这个功能，限制房间人数为5000人，超过5000人时自动阻止其余人加入。
*注: 此段子转自fenng</description>
    </item>
    <item>
      <title>Clubhouse需要你解决的算法题之二</title>
      <link>dzds.me/posts/clubhouse-problem2/</link>
      <pubDate>Fri, 05 Feb 2021 17:13:57 +0000</pubDate>
      <guid>dzds.me/posts/clubhouse-problem2/</guid>
      <description>书接前文，the coding guy delivered the feature of finding the closest friend in a timely manner. PM got new task from the leads team. They want to improve clubhouse users&amp;rsquo; engagement.
PM proposed the immediate idea that it would benefit the engagement if we can improve the joining rate of the rooms recommended to users.
Dev said, I would prefer to join rooms with my closest friends in. That&amp;rsquo;s said, we can recommend rooms based on the closeness between the room and the user.</description>
    </item>
    <item>
      <title>Clubhouse需要你解决的算法题之一</title>
      <link>dzds.me/posts/clubhouse-problem1/</link>
      <pubDate>Fri, 05 Feb 2021 16:50:10 +0000</pubDate>
      <guid>dzds.me/posts/clubhouse-problem1/</guid>
      <description>Clubhouse大火，平台迅速聚集了大量用户，每个用户都有自己的profile，profile里除了自己的id，还会标注推荐人。现在产品经理提出一个要求，希望能研究任意两个用户的最近的共同好友在哪。程序员也不知道pm为什么要提这么个要求，但这个功能不算费事，所以程序员决定不与pm多做讨论，因为一般情况下，所谓讨论都沦为给pm扩充知识理清思路的过程。简化起见，profile定义如下，完成TODO，注意，这个API可能会被多次调用。
class Profile { // Id of this profile. public String id; // Id of the person who nominated this person. public String nominatedBy; } public class Clubhouse { public Clubhouse(List&amp;lt;Profile&amp;gt; clubPool) { // TODO ? } public Profile getClosestCommonFriend(Profile a, Profile b) { // TODO } } </description>
    </item>
    <item>
      <title>俱乐部会所火了</title>
      <link>dzds.me/posts/comment-clubhouse/</link>
      <pubDate>Thu, 04 Feb 2021 17:13:57 +0000</pubDate>
      <guid>dzds.me/posts/comment-clubhouse/</guid>
      <description>Clubhouse(ch)几乎是一夜爆火，窃以为多少与Elon Musk推荐有关。社交产品几乎已成定居的今天，ch是切中了什么用户痛点，能病毒式传播开来是个有趣且值得研究的对象。
ch目前是邀请注册制，每个人可以邀请两人，那两人又可以分别邀请两人，以此类推。注册后，有一些话题和平台上用户的推荐，可以选择关注。平台会根据你的关注在应用首页展示相关的房间(room)。房间是这个app最大的特色，真正的信息交流发生的场所。房间里用户分成两波，一波是可以直接发言，这波人成为房间主持人(room moderators),另一波则需要举手得到房间主持人的批准才能发言。这非常类似大型会议现场，台上嘉宾，台下观众。主要是听嘉宾畅聊，但观众也可以举手示意得到允许后提问发言。ch另一个特点是交流介质是实时语音，纯直播，无记录，错过不可回看。所以房间主持人可以预告直播时间，你如果关注了此人，ta的预告会置顶你的应用首页。
就是这么一个产品，平平无奇。有人说像qq语音室，有人说像早期知乎，有名人或叫大v入驻，搞邀请制，逼格高，让草根用户与大v有了同台(准确讲是同房间不同台)聊天的满足感。或许都对，文字，语音和视频作为社交介质，都有其特点，不同人也各有偏好，没什么争论必要。邀请制也不是独此一家，能吸引到大v的却不多。
脸书，推特，微博像无界广场，虽有大v，但任何人都可在任何地方任何时间不加节制发言，只要不被夹。微信朋友圈像客厅，面向熟人发言，有所节制但受众有限。ch找了个中间地带，有限制的广场，虽然名字叫room。每个人都可以创建房间，房间可面向所有人也可以准入制，这把受众范围一下子推向了全平台的用户。房间里主持人控制下的台上台下又限制了一定的发言自由，同时直播式的语音交流带来的面向一群人发言的仪式感，两者结合有效减少甚至避免了现在主流社交平台无处不在的放肆言论。
社交媒介更新换代太快，人类却没能适应这么快。把本不属于一个圈层的芸芸众生推到一个平台，还是异步文字交流，结果更多的是牛头不对马嘴接着升级到仇恨敌视，而不是我们所希冀的不同的思想碰撞出火花。既然步子太大扯到了，那么退一步，牺牲点时空的便捷性(定时定点直播)，来一场更直接，有限制，还有点仪式感的交流，是不是值得探索下实验下？
所以，ch与其说切中了用户痛点，不如说切中了时代脉搏。</description>
    </item>
    <item>
      <title>动态规划系列(1)</title>
      <link>dzds.me/posts/dp-1/</link>
      <pubDate>Thu, 04 Feb 2021 12:13:57 +0000</pubDate>
      <guid>dzds.me/posts/dp-1/</guid>
      <description>01背包问题（01 backpack problem） Problem Given N items and a bag of weight capacity W. Each item has weight w[i] and value v[i]. What&amp;rsquo;s the most value this bag can hold?
E.g., N = 5, W = 10. w = [1 2 3 4 5], v = [5 4 3 2 1] Output: 14. Explanation: Choose item 1 2 3 4 whose total weight is 10 and total value is 14. Solution dp[i][j] := the most value to get if taken from item [1:i] and weight &amp;lt;= j.</description>
    </item>
    <item>
      <title>无聊的词句有人叫诗</title>
      <link>dzds.me/posts/poems/</link>
      <pubDate>Wed, 03 Feb 2021 15:23:57 +0000</pubDate>
      <guid>dzds.me/posts/poems/</guid>
      <description>Bothell静夜思 序 某晚理发归，于广袤黑夜驾白色宝驹，风冷气清， 天空无垠，弦月朗照，有云相伴，是有此诗。
夜冷风瑟星光浅，月揽云带欲遮颜.
秋色定染故乡叶，银钩亦悬家中檐。
贺祖国华诞 于2019/10
一万里外他乡望，七十载九州苍黄。 山河家国常入梦，五星红旗在飞扬。
蟹 于2019/9
乍看秋风起，满塘蟹黄肥。
朝舞霸王钳，暮入碟中味。
与老鼠夜谈有感 于2019/9
车来车往 滚滚历史洪流 看一代新人 登台挥斥方遒 忆同学少年 光阴过可还无忧 年年岁岁 花折叶落又知秋 古今多少事 雨打风吹影何留 前路存知己 漫漫长路与君游 \</description>
    </item>
    <item>
      <title>无与伦比的绿</title>
      <link>dzds.me/posts/poem-so-green/</link>
      <pubDate>Wed, 03 Feb 2021 14:22:57 +0000</pubDate>
      <guid>dzds.me/posts/poem-so-green/</guid>
      <description> 于2019/8 微软最后一天，即将奔赴新公司，心情舒畅，原谅一切，发现很多美
我车出车库 速度0迈 5.9秒 速度60迈 天蓝白云飘 树绿鸟儿叫 拂面微风 热闹阳光 路宽两米 我却似奔驰草原 柏油水泥 我却闻到绿草芬芳 每一个人脸上都有笑 我甚至与一切和解 给Nikhal一个微笑 把讨厌的人写进诗 哪怕其人面目可憎 原谅他 原谅啦 谁叫他有辆绿色的车 </description>
    </item>
    <item>
      <title>杂记</title>
      <link>dzds.me/posts/beautiful-translation/</link>
      <pubDate>Wed, 03 Feb 2021 11:18:07 +0000</pubDate>
      <guid>dzds.me/posts/beautiful-translation/</guid>
      <description>信雅达 不爱红装爱武装”一般翻译成：to be battle-dressed and not rosy-gowned
许渊冲先生则翻译成：to face the powder，not powder the face。 ​​​
麻将 The concept of Mahjong is to create order out of chaos based on random drawing of tiles (麻将的内核是通过随机抓牌在混乱中建立秩序)
随手记 人们有时觉得，要抵达人类灵魂深处，必须乘坐一艘马力强劲的潜水艇，最后却发现自己正穿着潜水服试图浸入一个浴缸。
有些种类的白蚁为了融入不属于自己的环境，能够暂时改变自己的外表，换上其他种类白蚁的外表，在定居下来之后再显出它们本来的面貌。
是什么奥秘使得我们的经历聚焦于一些画面而不是另外一些呢？承认记忆就像味觉一样任性也许会让人感到安慰，就像是我们的味觉决定了我们喜欢肉而不是海鲜那样，我们的记忆对于回忆的选择同样具有偶然性，然而，某种东西让我们相信，包括这种偶然，或者更确切地说，特别是这种偶然，都是一个应该被弄清楚的答案，而这个答案绝不是偶然的。
有的事情比我们想象中更快、更容易发生：冲突、事故、恋爱，还有习惯。
真是一堂生动的民粹主义逻辑课：先陈述已经失控的局势，然后提出对她来说难以实现的解决方案，最后将一切归咎于政治对手。</description>
    </item>
    <item>
      <title>大白传</title>
      <link>dzds.me/posts/big-white/</link>
      <pubDate>Wed, 03 Feb 2021 10:11:52 +0000</pubDate>
      <guid>dzds.me/posts/big-white/</guid>
      <description>有葱省大白者，少聪慧。弱冠及第乡试，旋会试，后求学于美利坚，研习变脸术。经六年乃成，称深假也。时乔氏苹果欲变脸术于手机，大白得势，骄宠一时。然其性猥，喜倚红偎翠，偷香窃玉，终日声色犬马。初喜东京卡哇伊，后慕欧美大胸波，朝秦暮楚，终无所获。几近不惑，恍觉立世不过白云苍狗。遂弃抛尼哈博，终日饮酒垂钓慨叹世情。及暮年，日上三竿尤不起，皆因年少不知精珍贵。</description>
    </item>
    <item>
      <title>别微软</title>
      <link>dzds.me/posts/bye-to-microsoft/</link>
      <pubDate>Wed, 03 Feb 2021 09:15:57 +0000</pubDate>
      <guid>dzds.me/posts/bye-to-microsoft/</guid>
      <description>于2019/8
时维九月,序属三秋。乘高铁自金陵入京，转三万尺鹏鸟，穿万里长云，赴未眠西雅图。及雨拍弦窗，知身已入他乡。 起始于视觉工作室组(VS)，坐息尚乱，懵懵懂学C#，昏昏然习.NET。两年有余，经项目些许，造开发工具若干。及阿尔法狗横空出世，人工智能风云骤起。蠢蠢欲动之际，得入多伦多组。与造项目101诸公论知识驱动引擎，探聊天基础服务，受教对话门户设计, 管窥深度学习, 概览自然语言理解，略通数据分析。所获颇丰，受益良多，难以一一言表，惟感念于心。及至重组，掩袖工谗者当道，开疆拓土者去国。藉此别微软，前路问谷歌。 鄙之愚见，当世英雄，聚应如皓月当空共驱万古长夜，散则似繁星满天各耀一方荒野。天下无不散之宴席，当存不变之情谊。微软五载，如驹过隙。幸识诸君，今戚戚焉道别，各自珍重，惟愿他日与君聚首，话旧情，论时势，再创长青基业。 </description>
    </item>
    <item>
      <title>关于我</title>
      <link>dzds.me/posts/about/</link>
      <pubDate>Tue, 02 Feb 2021 12:13:57 +0000</pubDate>
      <guid>dzds.me/posts/about/</guid>
      <description>sky之小站，做做技术探谈人生</description>
    </item>
    <item>
      <title>🔗</title>
      <link>dzds.me/posts/link/</link>
      <pubDate>Tue, 02 Feb 2021 11:13:57 +0000</pubDate>
      <guid>dzds.me/posts/link/</guid>
      <description>这个人很懒，什么都没写。</description>
    </item>
    <item>
      <title>开始写</title>
      <link>dzds.me/posts/startwritting/</link>
      <pubDate>Tue, 02 Feb 2021 08:16:57 +0000</pubDate>
      <guid>dzds.me/posts/startwritting/</guid>
      <description>开这个博客是因为沈向洋博士的一篇号召大家通过写作来淬炼思考广度与深度的文章。很多人可能有这样的经历，读了一本深受启发的书，看了一篇引起共鸣的文章，可身边却没有人分享。自己脑海中有很多的想法，很多的见解，却没有合适的场合去展现。在这个自媒体盛行的时代，写作或许就是一个让那些喜欢阅读喜欢思考喜欢交流的人展现自己的绝佳舞台。
王志文在一次采访中回答为何还单身时说，只想找一个可以随时说话的人，当时他40岁。这个事我有两个解读，一是王志文对于对话质量的要求很高，二是生活中能随时进行高质量对话的人很少。我并不是说能进行高质量对话人数一定少，而是被工作以及柴米油盐铺满的生活里，能展开一场“触及灵魂”的对话的场景太难得。同事聊天一般围绕工作，公司或者业界新闻，得闲时聊聊房价政治体育娱乐八卦。而朋友家人聚会，则往往逃不开吃喝玩乐结婚育儿择校等生活琐碎。在这些场合下，你突然挑起一个拷问人生意义的话题，多少显得不合时宜。大伙要领情跟你扯几句，也大概率会浅尝辄止，很快切回正规。
所以读很多书，进行过很多深度思考的人最终是孤独的。每一本启发思考的书，每一次思考的结果，都是把人推往更高的精神楼层。你看到的世界会越来越不同，对于充斥大小屏幕的新闻会有自己的解读，会发现更多的事件互相联系，会察觉很多被包装成的新奇现象只是历史上重复无数次的一个必然，会意识到很大比例的聊天只是休闲，很多人所说的话其实可以预测。每一次的提升，都是对这个世界更亲近的观察，更多的有趣与不堪也难免展露得更清晰。而这一切的新发现，可以诉说的听众却越来越少。因为，当时同时出发的一群人，最终同行的必然越来越少。而不在一个频道上的聊天，沦为寒暄的可能很大。
历史上应该有很多这样孤独的人，他们中的一部分把这份孤独留给了写作，若干年后，被一些人看到，或是发人深省或是深深共鸣。而今，信息社会给了孤独又乐于分享的人以极大便利，只需要连上互联网，就可以开始描绘脑海中的丰富抑或枯燥的世界。而不论你描绘的世界如何或者描绘的水平如何，只要被看到，就有可能连接到了更多与你在同一楼层的人。
有感于此，我开始写。</description>
    </item>
    <item>
      <title></title>
      <link>dzds.me/404/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>dzds.me/404/</guid>
      <description></description>
    </item>
    <item>
      <title>专题</title>
      <link>dzds.me/series/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>dzds.me/series/</guid>
      <description>sky博客的专题列表</description>
    </item>
    <item>
      <title>归档</title>
      <link>dzds.me/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>dzds.me/archives/</guid>
      <description>sky博客的归档列表</description>
    </item>
    <item>
      <title>折腾github action的一天</title>
      <link>dzds.me/posts/github_action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>dzds.me/posts/github_action/</guid>
      <description>了解github action后，第一步想到的是改造下这个博客。利用github action的工作流，做到直接在github上编辑markdown，保存后，触发一个设定的workflow，做到编译，部署编译好的静态网站到GitHub pages。
这里面关键是，如何部署编译好的静态网站到Github Pages。我用的是hexo这个静态网站生成器，代码是在一个独立repo，与要部署的目标repo不同。在GitHub的runner也就是服务器上，如何设置github credentials，从而能从那里部署是关键。 几番搜索发现了有个现成的github action: hexo-action。简单总结下:
Generate a deploy key pair. ssh-keygen -t rsa -C &amp;#34;username@example.com&amp;#34; Public key is saved in github page repo&amp;rsquo;s Settings/Deploy Keys. Private key is saved as a secret in source repo&amp;rsquo;s Settings/Secrets, e.g., named DEPLOY_KEY. Add the github workflow: name: Blog CICD on: push: branches: - &amp;#39;main&amp;#39; jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 with: submodules: true - name: Use Node.</description>
    </item>
    <item>
      <title>标签</title>
      <link>dzds.me/tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>dzds.me/tags/</guid>
      <description>sky博客的标签列表</description>
    </item>
  </channel>
</rss>
